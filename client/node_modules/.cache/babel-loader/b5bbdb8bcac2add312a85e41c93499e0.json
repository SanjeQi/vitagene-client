{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/src/components/Diet.js\";\nimport React, { Component } from 'react';\nimport { WordCloud } from \"word-cloud-react\";\n\nvar Diet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Diet, _Component);\n\n  function Diet() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Diet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Diet)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getStack = function () {\n      var stack = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.report[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var i = _step.value;\n\n          if (_this.getScore(i.trait) < 2) {\n            switch (i.trait) {\n              case \"Folate\":\n                stack.push(\"Folic Acid\");\n\n              default:\n                stack.push(i.trait);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return stack;\n      console.log(stack);\n    };\n\n    _this.generateFoodMap = function () {\n      var array = [];\n\n      _this.props.report.map(function (vitamin) {\n        return _this.props.vitamins.map(function (vit) {\n          if (vitamin.trait === vit.name) {\n            vit.sources.split(',').map(function (source) {\n              if (array.find(function (val) {\n                return val.word === source;\n              })) {\n                var x = array.findIndex(function (val) {\n                  return val.word === source;\n                });\n                array[x] = {\n                  word: source,\n                  value: array[x].value + 1\n                };\n              } else {\n                array.push({\n                  word: source,\n                  value: 2\n                });\n              }\n            });\n          }\n        });\n      });\n\n      console.log(array);\n      return array;\n    };\n\n    return _this;\n  }\n\n  _createClass(Diet, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"food\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Recommended Foods\"), React.createElement(WordCloud, {\n        width: \"auto\",\n        maxFont: 60,\n        minFont: 16,\n        logFunc: function logFunc(x) {\n          return Math.log2(x) * 10;\n        },\n        data: this.generateFoodMap(),\n        clickEvent: function clickEvent(x) {\n          return console.log(x.word);\n        },\n        color: ['#71803F', '#F8AC1D', '#598EC0', '#E2543E', '#1A3051', '#F46F73', '#8A87BB', '#56CFCD', '#297373', '#FF8552', '#F2E863', '#C2F8CB', '#3A6EA5', '#FF6700', '#C0C0C0', '#4E4381', '#523CBD'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Diet;\n}(Component);\n\nexport default Diet;","map":{"version":3,"sources":["/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/src/components/Diet.js"],"names":["React","Component","WordCloud","Diet","getStack","stack","props","report","i","getScore","trait","push","console","log","generateFoodMap","array","map","vitamin","vitamins","vit","name","sources","split","source","find","val","word","x","findIndex","value","Math","log2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { WordCloud } from \"word-cloud-react\";\n\n\nclass Diet extends Component {\n\n    getStack = () => {\n        const stack = []\n        for (const i of this.props.report)  {\n            if (this.getScore(i.trait) < 2 )\n        { \n            switch (i.trait) {\n                case \"Folate\":\n                stack.push(\"Folic Acid\");\n                default:stack.push(i.trait) }\n            }\n        }\n        return stack\n        console.log(stack)\n    }\n\n\n    generateFoodMap  = () => {\n        let array = []\n        this.props.report.map(vitamin => \n            this.props.vitamins.map(vit => {\n                if (vitamin.trait === vit.name) {\n                    vit.sources.split(',').map(source => {\n                        if (array.find(val => val.word === source)) {\n                            let x = array.findIndex(val => val.word === source) \n                            array[x] = {word: source, value: array[x].value + 1}\n                        }\n                    \n                        else { \n                            array.push({word: source, value: 2})\n                        }\n                    })\n               \n                 }\n            })\n        )\n        console.log(array)\n        return array \n       \n    }\n \n   render() {\n\n     return (\n       <div className=\"food\">\n       <h3>Recommended Foods</h3>\n         <WordCloud \n            width={\"auto\"} \n            maxFont={60} \n            minFont={16} \n            logFunc={(x)=> Math.log2(x) * 10} \n            data={this.generateFoodMap()} \n            clickEvent={(x)=>console.log(x.word)} \n            color={['#71803F', '#F8AC1D','#598EC0','#E2543E','#1A3051','#F46F73','#8A87BB','#56CFCD','#297373','#FF8552','#F2E863','#C2F8CB','#3A6EA5','#FF6700','#C0C0C0','#4E4381','#523CBD',]}/>\n           \n           \n        \n       </div>\n     );\n   }\n }\n\nexport default  Diet;\n"]},"metadata":{},"sourceType":"module"}