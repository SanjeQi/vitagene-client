{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React, { Component } from 'react';\nimport './WordCloudStyle.css';\nimport ReactTooltip from 'react-tooltip';\n\nvar WordCloudComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WordCloudComponent, _Component);\n\n  function WordCloudComponent(props) {\n    var _this;\n\n    _classCallCheck(this, WordCloudComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WordCloudComponent).call(this, props));\n    _this.state = {\n      fontSizer: [],\n      maxFont: 40,\n      minFont: 10\n    };\n    _this.handleFontSize = _this.handleFontSize.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //all font sizes are in px;\n\n\n  _createClass(WordCloudComponent, [{\n    key: \"handleFontSize\",\n    value: function handleFontSize() {\n      var _this2 = this; // set max font size\n\n\n      this.setState({\n        maxFont: this.props.maxFont ? this.props.maxFont : 40,\n        minFont: this.props.minFont ? this.props.minFont : 10\n      }, function () {\n        // console.log(this.state);\n        //checking if length is not zero\n        if (_this2.props.data.length !== 0) {\n          //if contains more than 1 word\n          if (_this2.props.data.length > 1) {\n            //work need to do\n            var ValueDifference = _this2.props.data[0].value - _this2.props.data[_this2.props.data.length - 1].value;\n            var PxDifference = _this2.state.maxFont - _this2.state.minFont; // console.log(ValueDifference,PxDifference);\n            // console.log(this.props.data);\n\n            _this2.props.data.map(function (item) {\n              var ItemValueDifference = _this2.props.data[0].value - item.value === 0 ? 1 : _this2.props.data[0].value - item.value;\n              var NewFontSize = _this2.state.maxFont - PxDifference / ValueDifference * ItemValueDifference; //get state value for fontSizer;\n\n              var localFontSizer = _this2.state.fontSizer;\n              localFontSizer.push(NewFontSize);\n\n              _this2.setState({\n                fontSizer: localFontSizer\n              });\n\n              return item;\n            });\n          } else {\n            //else set max value to the one word.\n            _this2.setState({\n              fontSizer: [_this2.props.maxFont]\n            });\n          }\n        }\n      }); // console.log(this.state);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // console.log(this.props);\n      this.handleFontSize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-react-word-cloud\",\n        style: this.props.width === 'auto' ? {\n          width: '98.5%'\n        } : {\n          width: this.props.width\n        }\n      }, this.props.data.length > 0 ? this.props.data.map(function (item, i) {\n        return React.createElement(\"span\", {\n          key: i,\n          style: {\n            color: _this3.props.color[Math.floor(Math.random() * 100) % _this3.props.color.length],\n            fontSize: _this3.props.logFunc ? _this3.props.logFunc(item.value) : _this3.state.fontSizer[i]\n          }\n        }, React.createElement(\"div\", {\n          \"data-tip\": \"Value: \" + item.value,\n          \"data-event\": \"click focus\",\n          onClick: function onClick() {\n            return _this3.props.clickEvent ? _this3.props.clickEvent(item) : '';\n          }\n        }, \" \", item.word, \" \"), React.createElement(ReactTooltip, {\n          place: \"top\",\n          type: \"dark\",\n          effect: \"solid\",\n          globalEventOff: \"click\"\n        }));\n      }) : React.createElement(\"span\", null, \"No Data\"));\n    }\n  }]);\n\n  return WordCloudComponent;\n}(Component);\n\nexport default WordCloudComponent;","map":null,"metadata":{},"sourceType":"module"}