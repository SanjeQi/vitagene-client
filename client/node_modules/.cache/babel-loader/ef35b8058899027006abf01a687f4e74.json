{"ast":null,"code":"import _toConsumableArray from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/src/components/YourGenome.js\";\nimport React, { Component } from 'react';\nimport BarGroup from './BarGroup';\nimport logo from \"../logo.svg\";\nimport { Parallax } from 'react-scroll-parallax';\nimport CanvasJSReact from '../canvasjs.react.js';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nvar YourGenome =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YourGenome, _Component);\n\n  function YourGenome() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YourGenome);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YourGenome)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getResultInfo = function (vitamin) {\n      switch (vitamin.score) {\n        case 0:\n          return 'Lower blood serum level';\n          break;\n\n        case 1:\n          return 'Slightly lower serum level';\n          break;\n\n        case 2:\n          return 'Intermediate';\n          break;\n\n        case 3:\n          return 'Slightly higher serum level';\n          break;\n\n        case 4:\n          return 'Higher blood serum level';\n          break;\n      }\n    };\n\n    _this.populateChart = function () {\n      var array = [];\n\n      _this.props.report.map(function (vitamin) {\n        return array.push({\n          \"vitamin\": vitamin.name,\n          \"score\": vitamin.score\n        });\n      });\n\n      return array;\n    };\n\n    return _this;\n  }\n\n  _createClass(YourGenome, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var report = this.props.report; //     let barHeight = 30\n      //     let barGroups = this.populateChart().map((d, i) => <g transform={`translate(0, ${i * barHeight})`}>\n      //     <BarGroup d={d} barHeight={barHeight} />\n      //   </g>)  \n\n      var options = {\n        animationEnabled: true,\n        theme: \"light2\",\n        title: {\n          text: \"Your genome\"\n        },\n        axisX: {\n          title: \"Vitamin\",\n          reversed: true\n        },\n        axisY: {\n          title: \"Blood serum concentration\",\n          labelFormatter: this.addSymbols\n        },\n        data: [{\n          type: \"bar\",\n          dataPoints: _toConsumableArray(this.populateChart())\n        }]\n      };\n      return React.createElement(\"div\", {\n        className: \"result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Your phenotype Results\"), report.map(function (vitamin) {\n        return React.createElement(\"div\", {\n          className: \"info-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, vitamin.trait), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Score: \", vitamin.score, \" - \", _this2.getResultInfo(vitamin)));\n      }), React.createElement(CanvasJSChart, {\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return YourGenome;\n}(Component);\n\nexport default YourGenome;","map":{"version":3,"sources":["/Users/flatironschool/Development/code/Mod5/vitagene-client/vitagene-react-client/src/components/YourGenome.js"],"names":["React","Component","BarGroup","Parallax","CanvasJSReact","CanvasJS","CanvasJSChart","YourGenome","getResultInfo","vitamin","score","populateChart","array","props","report","map","push","name","options","animationEnabled","theme","title","text","axisX","reversed","axisY","labelFormatter","addSymbols","data","type","dataPoints","trait"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;;IAEMC,U;;;;;;;;;;;;;;;;;;UAGNC,a,GAAgB,UAAAC,OAAO,EAAI;AACvB,cAAQA,OAAO,CAACC,KAAhB;AACI,aAAK,CAAL;AACC,iBAAO,yBAAP;AACD;;AACA,aAAK,CAAL;AACA,iBAAQ,4BAAR;AACA;;AACA,aAAK,CAAL;AACA,iBAAO,cAAP;AACA;;AACA,aAAK,CAAL;AACC,iBAAO,6BAAP;AACD;;AACA,aAAK,CAAL;AACC,iBAAO,0BAAP;AACD;AAfJ;AAkBH,K;;UAIDC,a,GAAgB,YAAM;AACtB,UAAIC,KAAK,GAAG,EAAZ;;AACA,YAAKC,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAsB,UAAAN,OAAO;AAAA,eAC7BG,KAAK,CAACI,IAAN,CAAW;AAAC,qBAAWP,OAAO,CAACQ,IAApB;AAA0B,mBAASR,OAAO,CAACC;AAA3C,SAAX,CAD6B;AAAA,OAA7B;;AAGA,aAAOE,KAAP;AACC,K;;;;;;;6BAMS;AAAA;;AAAA,UACCE,MADD,GACW,KAAKD,KADhB,CACCC,MADD,EAEV;AACA;AACA;AACA;;AAEA,UAAMI,OAAO,GAAG;AACZC,QAAAA,gBAAgB,EAAE,IADN;AAEZC,QAAAA,KAAK,EAAE,QAFK;AAGZC,QAAAA,KAAK,EAAC;AACFC,UAAAA,IAAI,EAAE;AADJ,SAHM;AAMZC,QAAAA,KAAK,EAAE;AACHF,UAAAA,KAAK,EAAE,SADJ;AAEHG,UAAAA,QAAQ,EAAE;AAFP,SANK;AAUZC,QAAAA,KAAK,EAAE;AACHJ,UAAAA,KAAK,EAAE,2BADJ;AAEHK,UAAAA,cAAc,EAAE,KAAKC;AAFlB,SAVK;AAcZC,QAAAA,IAAI,EAAE,CAAC;AACHC,UAAAA,IAAI,EAAE,KADH;AAEHC,UAAAA,UAAU,qBAAM,KAAKnB,aAAL,EAAN;AAFP,SAAD;AAdM,OAAhB;AAsBA,aAEA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEMG,MAAM,CAACC,GAAP,CAAW,UAAAN,OAAO;AAAA,eACnB;AAAM,UAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,OAAO,CAACsB,KAAb,CAFL,EAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAWtB,OAAO,CAACC,KAAnB,SAA6B,MAAI,CAACF,aAAL,CAAmBC,OAAnB,CAA7B,CAHL,CADmB;AAAA,OAAlB,CAFN,EAaA,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAIS,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbA,CAFA;AAkCC;;;;EArGwBjB,S;;AAuGxB,eAAeM,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport BarGroup from './BarGroup'\nimport logo from '../logo.svg';\nimport { Parallax } from 'react-scroll-parallax'\nimport CanvasJSReact from '../canvasjs.react.js';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass YourGenome extends Component {\n\n    \ngetResultInfo = vitamin => {\n    switch (vitamin.score) {\n        case 0:\n         return 'Lower blood serum level'\n        break;\n        case 1:\n        return  'Slightly lower serum level'\n        break;\n        case 2:\n        return 'Intermediate'\n        break;\n        case 3:\n         return 'Slightly higher serum level'\n        break;\n        case 4:\n         return 'Higher blood serum level'\n        break;\n    }\n\n}\n\n\n\npopulateChart = () => {\nlet array = []\nthis.props.report.map(vitamin =>\narray.push({\"vitamin\": vitamin.name, \"score\": vitamin.score})\n)\nreturn array\n}\n \n\n\n\n\nrender () {\n    const {report} = this.props\n//     let barHeight = 30\n//     let barGroups = this.populateChart().map((d, i) => <g transform={`translate(0, ${i * barHeight})`}>\n//     <BarGroup d={d} barHeight={barHeight} />\n//   </g>)  \n\nconst options = {\n    animationEnabled: true,\n    theme: \"light2\",\n    title:{\n        text: \"Your genome\"\n    },\n    axisX: {\n        title: \"Vitamin\",\n        reversed: true,\n    },\n    axisY: {\n        title: \"Blood serum concentration\",\n        labelFormatter: this.addSymbols\n    },\n    data: [{\n        type: \"bar\",\n        dataPoints: [...this.populateChart()\n            \n        ]\n    }]\n}\n\nreturn (\n\n<div className=\"result\">\n    <h2>Your phenotype Results</h2>\n     {report.map(vitamin => \n     <div  className=\"info-container\"> \n     \n          <h3>{vitamin.trait}</h3>\n          <p>Score: {vitamin.score} - {this.getResultInfo(vitamin)}</p>\n         \n     </div>\n    )}\n\n\n\n<CanvasJSChart options = {options}/>\n\n\n\n\n    {/* <svg width=\"800\" height=\"300\" >\n      <g className=\"container\">\n      <text className=\"title\" x=\"10\" y=\"30\">Week beginning 9th July</text>\n        <g className=\"chart\" transform=\"translate(100,60)\">\n          {barGroups}\n          </g>\n      </g>\n    </svg> */}\n\n\n    \n</div>\n\n )\n}\n}\n export default YourGenome\n"]},"metadata":{},"sourceType":"module"}